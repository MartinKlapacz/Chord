syntax = "proto3";

package chord;

// helper

message Empty {
}

// chord protocol

message AddressMsg {
  string address = 1;
}

message HashPosMsg {
  bytes key = 1;
}

message FingerTableMsg {
  repeated AddressMsg fingers = 1;
}

message FingerEntryMsg {
  bytes id = 1;
  string address = 2;
}

message UpdateFingerTableEntryRequest {
  uint32 index = 1;
  FingerEntryMsg fingerEntry = 2;
}

message GetKvStoreSizeResponse {
  uint32 size = 1;
}

message KvPairMsg {
  bytes key = 1;
  string value = 2;
}

message GetKvStoreDataResponse {
  repeated KvPairDebugMsg kvPairs = 1;
}

// debugging

message KvPairDebugMsg {
  string key = 1;
  string value = 2;
}

message FingerEntryDebugMsg {
  string id = 1;
  string address = 2;
}

message NodeSummaryMsg {
  string url = 1;
  string pos = 2;
  FingerEntryDebugMsg predecessor = 3;
  repeated FingerEntryDebugMsg fingerEntries = 4;
}

// hashtable RPCs

message GetRequest {
  bytes key = 1;
}

message GetResponse {
  string value = 1;
  GetStatus status = 2;
}

enum GetStatus {
  OK = 0;
  NOT_FOUND = 1;
}

message PutRequest {
  bytes key = 1;
  uint64 ttl = 2;
  uint32 replication = 3;
  string value = 4;
}

message GetPredecessorResponse {
   optional AddressMsg address_optional = 1;
}

service Chord {
  // chord protocol
  rpc FindSuccessor (HashPosMsg) returns (AddressMsg);
  rpc GetPredecessor (Empty) returns (GetPredecessorResponse);
  rpc GetDirectSuccessor (Empty) returns (AddressMsg);
  rpc FindClosestPrecedingFinger (HashPosMsg) returns (FingerEntryMsg);

  // debugging
  rpc GetNodeSummary (Empty) returns (NodeSummaryMsg);
  rpc GetKvStoreSize (Empty) returns (GetKvStoreSizeResponse);
  rpc GetKvStoreData (Empty) returns (GetKvStoreDataResponse);

  // Hashtable RPCS
  rpc Get(GetRequest) returns (GetResponse);
  rpc Put(PutRequest) returns (Empty);

  // stabilization
  rpc FixFingers(Empty) returns (Empty);
  rpc Stabilize(Empty) returns (Empty);
  rpc Notify(AddressMsg) returns (stream KvPairMsg);

  // security
  rpc Health(Empty) returns (Empty);
}
