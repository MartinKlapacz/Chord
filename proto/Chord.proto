syntax = "proto3";

package chord;

message Empty {
}

message AddressMsg {
  string address = 1;
}

message KeyMsg {
  bytes key = 1;
}

message FingerTableMsg {
  repeated AddressMsg fingers = 1;
}

message FingerEntryMsg {
  bytes id = 1;
  string address = 2;
}

message FingerEntryDebugMsg {
  string id = 1;
  string address = 2;
}

message NodeSummaryMsg {
  string url = 1;
  string id = 2;
  FingerEntryDebugMsg predecessor = 3;
  repeated FingerEntryDebugMsg fingerEntries = 4;
}

message Data {
  // todo
}

message UpdateFingerTableEntryRequest {
  uint32 index = 1;
  FingerEntryMsg fingerEntry = 2;
}

enum GetStatus {
  OK = 0;
  NOT_FOUND = 1;
}

message GetResponse {
  string value = 1;
  GetStatus status = 2;
}

message PutRequest {
  KeyMsg key = 1;
  uint64 ttl = 2;
  uint32 replication = 3;
  string value = 4;
}

service Chord {
  // chord protocol
  rpc FindSuccessor (KeyMsg) returns (AddressMsg);
  rpc FindPredecessor (KeyMsg) returns (AddressMsg);
  rpc GetPredecessor (Empty) returns (AddressMsg);
  rpc SetPredecessor (AddressMsg) returns (Data);
  rpc GetDirectSuccessor (Empty) returns (AddressMsg);
  rpc UpdateFingerTableEntry (UpdateFingerTableEntryRequest) returns (Empty);
  rpc FindClosestPrecedingFinger (KeyMsg) returns (FingerEntryMsg);

  // debugging
  rpc GetNodeSummary (Empty) returns (NodeSummaryMsg);

  // Hashtable calls
  rpc Get(KeyMsg) returns (GetResponse);
  rpc Put(PutRequest) returns (Empty);
}
